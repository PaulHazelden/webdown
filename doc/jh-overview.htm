<h1 id="jh-overview">JH Overview</h1>
<h2 id="concept">Concept</h2>
<h3 id="overview">Overview</h3>
<p>Build a community website engine using Markdown, based on text files
stored and version controlled in GitHub.</p>
<p>The aim of this project is to create a way to build and maintain a
community website which is simple and transparent, built in a modular
fashion with well-defined interfaces between the various parts. The
development program will enable all the usual site maintence activities
to be undertaken, but because the data is all stored in text files, any
unusual modifications can be made by suitably authorised people through
directly editing the files in GitHub.</p>
<p>There are many tools for building websites already available, but in
each case the interface to be used by the website developer is complex,
with obscure functionality and unclear terminology. The aim in this case
is that, once the website developer understands the (fairly simple)
build process, it should be obvious what needs to be done (what file or
files need to be changed, and how) to achieve the desired result.</p>
<h3 id="key-details">Key Details</h3>
<p>Two basic programs are needed: one to create and maintain the various
parts of the site, and the other to assemble the files into web pages -
see ‘<a href="jh-page-generation.md">Page Generation</a>’ for more
details. Two subsidiary programs can be identified at this stage: an
internal consistency checker, which we will need to run as a stand-alone
tool sometimes; and probably a bank account query tool to check whether
a membership payment has been received from a specified User.</p>
<p>Every unit of content will initially be owned by its creator; the
owner of an article or blog can invite other people (defined as the
members of a Group) to share the writing and editing; authorised System
Administrators can edit any content. The ownership (and the
responsibility for its maintenance) of an article can be passed on to
another member - with their permission, of course.</p>
<p>An editor of any unit can restore any previous version; the version
of the unit (and the latest version, if that differs) will be displayed;
the difference between any two versions can be displayed.</p>
<p>The page content is stored in <a href="#Markdown">Markdown</a> (see
below); the page structure and site structure is stored in text based
tables (possibly in CSV - easier to parse than Markdown?); element style
uses standard CSS.</p>
<p>Page structure is determined by page type, and a few standard page
types are provided by default.</p>
<p>The public requirements are documented on the <a
href="https://just-human.net/admin-discussion/site-functionality"
title="Site Functionality">Site Functionality</a> page of the current
website; some more principles and thoughts on implementation are given
in the document, ‘<a href="jh-towards-a-platform.md">Towards a Platform
for Just Human?</a>’.</p>
<p>Web pages will be assembled from their constituent parts as they are
required; this should be fairly straightforward. The complex task lies
in building those components so they are ready to be displayed: the core
tasks are to open a Markdown file (or create a new one), edit the file;
and each time the file is saved to GitHub, (1) write it to GitHub, and
(2) run Pandoc to convert it to HTML. There will also be a need to hide
and delete components.</p>
<p>Web pages can be moved and renamed (but probably only by a system
administrator - we don’t want this to happen too often); the
constituents of the page will remain attached to the page. We don’t need
very sophisticated editing tools here, as anything beyond the standard
operations can be undertaken in a plain text editor by a site
administrator.</p>
<p>When a page is moved or renamed, the page content is moved to the new
file system location, and a page stub is provided, with a link to the
new page. This way, all internal links automatically follow the page to
its new name and/or location, and external links into the site will
continue to work.</p>
<p>If someone wants to create a new page with the same name in the same
location as a moved or renamed page, this will be handled like any other
duplicate name: a new page ID is created, and the name in the file
system will have a ‘-version_number’ appended to the name,</p>
<h2 id="standard-building-blocks">Standard Building Blocks</h2>
<p>Page Types: * system; * conversation; * article; * blog; *
survey/questionnaire; * generated; and * administration.</p>
<p>Content types:</p>
<ul>
<li>articles;</li>
<li>blogs;</li>
<li>posts in a discussion;</li>
<li>comments on articles, blogs and other comments; and</li>
<li>responses to requests for feedback.</li>
</ul>
<h2 id="indexes">Indexes</h2>
<h3 id="page-index">Page Index</h3>
<p>Every page has two identities: an internal reference (in effect, a
database key), and an external name and location in the tree-based file
structure. Hyperlinks within the site use the internal reference, so
pages can be moved without breaking any links.</p>
<p>The key details of every page are held in a table (or, probably, a
series of tables) called the <em>Page Index</em> which points to the
current page file name and location.</p>
<p>The Page Index is a file (eventually, a series of files), which
contains for each page on the site the internal reference and the
current file name and location for that page.</p>
<p>The size of the Page Index needs to be determined by performance
considerations: if the page access starts to be significantly delayed
once the Index grows to 500 entries, then a new Index will be created
for every 500 pages.</p>
<p>Each line of the Page Index simply contains the page reference
location: for example, “59, blog/27/23/8”, which would be the 8th blog
entry in 2023 for User number 27, and identifies this as page 59.</p>
<h3 id="user-index">User Index</h3>
<p>Every User has two identities: an internal reference, and an external
ID, both of which are unique, but the reference is a system-generated
number and the ID is a User-chosen string.</p>
<p>The User Index is a file (or, like the Page Index, a series of files)
which contains for each User the internal reference and their personal
details:</p>
<ul>
<li>User Reference</li>
<li>User ID (sometimes called ‘Username’)</li>
<li>Authorisation level</li>
<li>Real name</li>
<li>5 digit (?) random generated security code</li>
<li>Email address</li>
<li>Alternate access details</li>
<li>Hashed password</li>
</ul>
<p>Some Users are site administrators; presumably there will be the need
for several levels of administration permissions, which will be
indicated by their authorisation level.</p>
<h3 id="group-index">Group Index</h3>
<p>Users can form groups. Each group will have one or more
administrators plus an arbitrary number of ordinary members. A User will
become a member of a Group if they want to join, and an Administrator
agrees (or the other way round). A User can allow the members of a Group
they administer to edit a page they own.</p>
<p>The Group Index is a file (or, like the Page Index, a series of
files) which contains for each Group the reference numbers of the
administrators and members:</p>
<ul>
<li>Group Reference</li>
<li>One or more administrator User References</li>
<li>“M”</li>
<li>Zero or more member User References</li>
</ul>
<p>At present, we are not thinking of enabling a Group to include other
Groups as a members. If the Groups take off, this would probably be
appreciated, but it significantly increases the conceptual
complexity.</p>
<p>As a compromise, perhaps we enable two kinds of Group: one (a ‘User
Group’) which can be set up by a User and contains only Users, and one
(a ‘Group Group’) which can only be set up by a System Administrator, to
ensure that it does not create any circular references, and can contain
both Users and User Groups.</p>
<h3 id="tag-index">Tag Index</h3>
<p>We probably need to give this a bit more thought, but as a start…</p>
<p>All the Tags starting with the same letter will be in alphabetic
sequence within a single fle. In those files, the tag will be followed
by a list of Pages pointed to by that Tag, and identified by the
Internal Reference (or possibly Page ID).</p>
<h2 id="money">Money</h2>
<p>Instead of interfacing with an online payment tool as we do at
present, it would be simpler and cheaper if we ask every member to set
up a standing order, and give them a customer reference to quote which
we can use to identify who the money is coming from. (This is the
thinking behind the random security code in the User data, so we can
ensure it is the correct person - but, really, do we care if someone
fraudulently pays for someone else’s membership?)</p>
<p>This implies that the new member signup process will need to access
the bank details and check whether the standing order has arrived; from
a security perspective, should this be a standalone program which has no
user interface?</p>
<p><a name="Markdown"></p>
<h2 id="markdown">Markdown</h2>
<p></a></p>
<p>We need to identify the precise dialect of Markdown to be used. Is <a
href="https://commonmark.org/" title="Common Mark">Common Mark</a>
suitable?</p>
<p>As a start, we need a checklist of required functionality.</p>
<ul>
<li>Front matter - provided in some dialects, but what exactly do we
need here? An initial brainstorm suggests the following.
<ul>
<li>Page ID</li>
<li>Author (User Reference as a minimum, possibly with User ID)</li>
<li>Create date and time</li>
<li>Last changed date and time</li>
<li>Document Title (to avoid the need, as in this document, to use the
level 1 heading to indicate the document title)</li>
<li>Document Sub-title, if there is one</li>
</ul></li>
<li>Hyperlinks need to specify whether they open in the current tab or a
new one.</li>
<li>Internal hyperlinks are needed, to navigate within a unit of
content.</li>
<li>We probably need to be able to specify basic image details (such as
size and alignment)</li>
</ul>
